import numpy as np
import astropy.units as u
import ASSolarPy.Coordinates as crd

class AtmoProfile:
    Avrett2008 = 1

    #-------------------------------------------------------------------------------
    @staticmethod
    def _barometric_coef(base, height, temperature):
        dh = np.diff(np.hstack([base, height]))
        return np.exp(-np.cumsum(dh/temperature * 2.222e-4))

    #-------------------------------------------------------------------------------
    def __init__(self, height = None, temperature = None, density = None, model = Avrett2008, detalization = None):
        if model is AtmoProfile.Avrett2008:
            height, temperature, density = AtmoProfile._Avrett2008()

        if not detalization is None:
            lnT = np.log(temperature)
            lnD = np.log(density)
            h_new = np.arange(0, max(height)+detalization, detalization)
            temperature = np.exp(np.interp(h_new, height, lnT))
            density = np.exp(np.interp(h_new, height, lnD))
            height = h_new

        self.__height = np.array(height, dtype = np.float64)
        self.__r = (self.__height*u.cm).to_value(u.Rsun)
        self.__temperature = np.array(temperature, dtype = np.float64)
        self.__density = np.array(density, dtype = np.float64)

    #-------------------------------------------------------------------------------
    @property
    def get(self):
        return (self.__height, self.__temperature, self.__density)

    #-------------------------------------------------------------------------------
    def los(self, x, y):
        coords = crd.Coordinates(xy = [x, y])
        if coords.is_outSun:
            out = np.sqrt(x**2 + y**2) - 1
            h_max = np.max(self.__r)
            if out > h_max:
                return (None, None, None)
            else:
                los = np.sqrt((1+self.__r)**2 - (1+out)**2)

                r = los[~np.isnan(los)]
                if len(r) < 3:
                    return (None, None, None)
                r = np.hstack((-np.flip(r), r))
                t = self.__temperature[~np.isnan(los)]
                t = np.hstack((np.flip(t), t))
                d = self.__density[~np.isnan(los)]
                d = np.hstack((np.flip(d), d))
                return ((r*u.solRad).to_value(u.cm), t, d)
        else:
            dir_cos = coords.dir_cos
            cos_phi = dir_cos[2]

            los = np.sqrt(cos_phi**2 + (1+self.__r)**2 - 1) - cos_phi

            return ((los*u.solRad).to_value(u.cm), self.__temperature, self.__density)

    #-------------------------------------------------------------------------------
    @staticmethod
    def _Avrett2008():
        height = [0.00000000,   1000000.0,      2000000.0,      3500000.0,      5000000.0,      7500000.0,      10000000.,      12500000.,      15000000.,      17500000.,      20000000.,      25000000.,      30000000.,      35000000.
                , 40000000.,    45000000.,      49000000.,      52500000.,      56000000.,      61500000.,      66000000.,      70000000.,      75000000.,      80000000.,      85400000.,      90000000.,      94600000.,      97100000.
                , 1.0030000e+008, 1.0320000e+008, 1.0650000e+008, 1.1010000e+008, 1.1430000e+008, 1.2140000e+008, 1.2990000e+008, 1.3980000e+008, 1.5200000e+008, 1.6170000e+008, 1.7220000e+008, 1.8200000e+008, 1.8940000e+008, 1.9460000e+008
                , 1.9890000e+008, 2.0240000e+008, 2.0550000e+008, 2.0830000e+008, 2.0980000e+008, 2.1100000e+008, 2.1200000e+008, 2.1260000e+008, 2.1300000e+008, 2.1320000e+008, 2.1340000e+008, 2.1360000e+008, 2.1380000e+008, 2.1419300e+008
                , 2.1451600e+008, 2.1470500e+008, 2.1486500e+008, 2.1501200e+008, 2.1511600e+008, 2.1520300e+008, 2.1528700e+008, 2.1534800e+008, 2.1540700e+008, 2.1547300e+008, 2.1555000e+008, 2.1561600e+008, 2.1568200e+008, 2.1575700e+008
                , 2.1582100e+008, 2.1588400e+008, 2.1594200e+008, 2.1600100e+008, 2.1606300e+008, 2.1612600e+008, 2.1622900e+008, 2.1632900e+008, 2.1645600e+008, 2.1660300e+008, 2.1676900e+008, 2.1699900e+008, 2.1723200e+008, 2.1752800e+008
                , 2.1787400e+008, 2.1824400e+008, 2.1860800e+008, 2.1914600e+008, 2.1965200e+008, 2.2019200e+008, 2.2076600e+008, 2.2137400e+008, 2.2200400e+008, 2.2277400e+008, 2.2352900e+008, 2.2433200e+008, 2.2516400e+008, 2.2594300e+008
                , 2.2696900e+008, 2.2823800e+008, 2.2943700e+008, 2.3085500e+008, 2.3257800e+008, 2.3461000e+008, 2.3781900e+008, 2.4186600e+008, 2.4579000e+008, 2.4955600e+008, 2.5354700e+008, 2.5782300e+008, 2.6283200e+008, 2.6881000e+008
                , 2.7614900e+008, 2.8444000e+008, 2.9707600e+008, 3.1337900e+008, 3.4249900e+008, 3.7527100e+008, 4.2958600e+008, 4.9686400e+008, 5.7628300e+008, 7.3608200e+008, 8.9742400e+008, 1.1596200e+009, 1.5392000e+009, 2.1133100e+009
                , 2.6676600e+009, 3.6079500e+009, 4.7009300e+009, 6.8084400e+009]
        temp = [6583.0000,      6397.0000,      6231.0000,      6006.0000,      5826.0000,      5607.0000,      5431.0000,      5288.0000,      5165.0000,      5080.0000,      5010.0000,      4907.0000,      4805.0000,      4700.0000
              , 4590.0000,      4485.0000,      4435.0000,      4410.0000,      4400.0000,      4435.0000,      4510.0000,      4640.0000,      4840.0000,      5090.0000,      5430.0000,      5720.0000,      5969.0000,      6100.0000
              , 6225.0000,      6315.0000,      6400.0000,      6474.0000,      6531.0000,      6576.0000,      6598.0000,      6610.0000,      6623.0000,      6633.0000,      6643.0000,      6652.0000,      6660.0000,      6667.0000
              , 6674.0000,      6680.0000,      6686.0000,      6694.0000,      6700.0000,      6706.0000,      6718.0000,      6740.0000,      6768.0000,      6800.0000,      6870.0000,      6992.0000,      7248.0000,      7950.0000
              , 9115.0000,      10980.000,      13200.000,      15760.000,      18140.000,      20510.000,      23100.000,      25120.000,      27130.000,      29500.000,      32260.000,      34580.000,      36870.000,      39400.000
              , 41450.000,      43400.000,      45140.000,      46800.000,      48490.000,      50140.000,      52690.000,      55020.000,      57790.000,      60790.000,      63950.000,      68000.000,      71810.000,      76330.000
              , 81220.000,      86120.000,      90640.000,      96860.000,      102300.00,      107800.00,      113200.00,      118700.00,      124000.00,      130200.00,      135800.00,      141600.00,      147200.00,      152300.00
              , 158600.00,      166000.00,      172600.00,      180100.00,      188600.00,      198100.00,      212000.00,      227800.00,      241900.00,      254400.00,      266700.00,      279000.00,      292500.00,      307300.00
              , 324000.00,      341300.00,      365000.00,      392000.00,      432900.00,      471600.00,      524300.00,      577400.00,      629300.00,      711700.00,      778300.00,      865000.00,      963700.00,      1080000.0
              , 1170000.0,      1294000.0,      1410000.0,      1586000.0]
        dens = [8.3970000e+013, 5.8930000e+013, 4.2580000e+013, 2.7290000e+013, 1.9090000e+013, 1.2330000e+013, 8.7480000e+012, 6.5960000e+012, 5.1320000e+012, 4.1020000e+012, 3.3080000e+012, 2.1820000e+012, 1.4330000e+012, 9.3370000e+011
              , 6.0340000e+011, 3.8710000e+011, 2.7180000e+011, 1.9960000e+011, 1.4670000e+011, 9.1630000e+010, 6.4240000e+010, 5.1590000e+010, 4.7620000e+010, 5.4580000e+010, 8.0550000e+010, 1.1620000e+011, 1.5130000e+011, 1.7270000e+011
              , 1.9030000e+011, 2.0210000e+011, 2.0910000e+011, 2.1040000e+011, 1.9950000e+011, 1.7600000e+011, 1.4890000e+011, 1.4380000e+011, 1.4230000e+011, 1.2670000e+011, 1.0270000e+011, 7.9690000e+010, 6.4500000e+010, 5.5260000e+010
              , 4.8260000e+010, 4.3070000e+010, 3.8830000e+010, 3.4980000e+010, 3.2930000e+010, 3.1280000e+010, 2.9850000e+010, 2.8910000e+010, 2.8260000e+010, 2.7870000e+010, 2.7410000e+010, 2.6860000e+010, 2.6080000e+010, 2.4320000e+010
              , 2.3250000e+010, 2.2740000e+010, 2.0460000e+010, 1.7610000e+010, 1.5500000e+010, 1.3830000e+010, 1.2370000e+010, 1.1440000e+010, 1.0630000e+010, 9.8150000e+009, 9.0130000e+009, 8.4340000e+009, 7.9330000e+009, 7.4540000e+009
              , 7.1070000e+009, 6.8090000e+009, 6.5650000e+009, 6.3480000e+009, 6.1420000e+009, 5.9550000e+009, 5.6870000e+009, 5.4640000e+009, 5.2220000e+009, 4.9840000e+009, 4.7570000e+009, 4.4970000e+009, 4.2800000e+009, 4.0490000e+009
              , 3.8270000e+009, 3.6280000e+009, 3.4630000e+009, 3.2590000e+009, 3.0990000e+009, 2.9530000e+009, 2.8210000e+009, 2.7000000e+009, 2.5920000e+009, 2.4770000e+009, 2.3790000e+009, 2.2880000e+009, 2.2050000e+009, 2.1350000e+009
              , 2.0540000e+009, 1.9660000e+009, 1.8940000e+009, 1.8190000e+009, 1.7390000e+009, 1.6590000e+009, 1.5540000e+009, 1.4480000e+009, 1.3660000e+009, 1.3000000e+009, 1.2400000e+009, 1.1870000e+009, 1.1360000e+009, 1.0840000e+009
              , 1.0300000e+009, 9.7940000e+008, 9.1650000e+008, 8.5290000e+008, 7.6950000e+008, 7.0220000e+008, 6.2420000e+008, 5.5780000e+008, 5.0210000e+008, 4.2740000e+008, 3.7680000e+008, 3.2060000e+008, 2.6690000e+008, 2.1470000e+008
              , 1.8050000e+008, 1.4110000e+008, 1.1080000e+008,      74910000.]
        return (height, temp, dens)
